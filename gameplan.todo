FontGet PowerShell Module Development Plan
========================================

1. Module Structure
   ✓ Create module folder structure:
     - FontGet/
       ✓ FontGet.psd1 (Module manifest)
       ✓ FontGet.psm1 (Module script)
       - Public/
         ✓ Install-GoogleFont.ps1
         ✓ Uninstall-GoogleFont.ps1
         ✓ Show-Fonts.ps1
         ✓ Search-GoogleFont.ps1
       - Private/
         ✓ Write-Log.ps1
         ✓ Test-FontInstalled.ps1
         ✓ Get-Fonts.ps1
         ✓ Get-FontFiles.ps1
         ✓ Invoke-GoogleFont.ps1

2. Command Structure
   ✓ Main commands following PS conventions:
     ✓ Install-GoogleFont
     ✓ Uninstall-GoogleFont
     ✓ Show-Fonts
     ✓ Search-GoogleFont

   ✓ Create alias 'gfont' with parameter mapping:
     ✓ gfont install "Roboto" -> Install-GoogleFont -Name "Roboto"
     ✓ gfont uninstall "Roboto" -> Uninstall-GoogleFont -Name "Roboto"
     ✓ gfont list -> Show-Fonts
     ✓ gfont search -> Search-GoogleFont

3. Core Functions Implementation
   ✓ Private Functions:
     ✓ Write-Log.ps1 (migrated and enhanced)
     ✓ Test-FontInstalled.ps1 (migrated and enhanced)
     ✓ Get-Fonts.ps1 (migrated and enhanced)
     ✓ Get-FontFiles.ps1 (migrated and enhanced)
   
   ✓ Public Functions:
     ✓ Install-GoogleFont.ps1 (migrated and enhanced)
     ✓ Uninstall-GoogleFont.ps1 (created new)
     ✓ Show-Fonts.ps1 (created new)
     ✓ Search-GoogleFont.ps1 (created new)

4. Installation Paths
   ✓ Define proper font installation directories:
     ✓ CurrentUser: "$env:LOCALAPPDATA\Microsoft\Windows\Fonts"
     ✓ AllUsers: "$env:windir\Fonts"
   ✓ Define registry paths:
     ✓ CurrentUser: "HKCU:\Software\Microsoft\Windows NT\CurrentVersion\Fonts"
     ✓ AllUsers: "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Fonts"

5. Testing
   ✓ Basic module loading
   ✓ Command aliases
   ✓ Font installation
   ✓ Font uninstallation
   ✓ Font listing
   ✓ Font searching
   ✓ Error handling
   ✓ Admin rights checking
   ✓ Registry operations
   ✓ File operations
   ✓ CLI interface

6. Documentation
   ✓ Update README.md with:
     ✓ Installation instructions
     ✓ Usage examples
     ✓ Command reference
     ✓ Requirements
   ✓ Add inline documentation
   ✓ Add comment-based help

7. Manual Testing
   - Test installation
    - Test multiple installations
    - Test installation of all google fonts
   - Test uninstallation
    - Test multiple uninstallations
    - Test uninstallation of all google fonts
   - Test list
    - Test listing of all google fonts
   ✓ Test search
    ✓ Test exact matches (e.g., "lato")
    ✓ Test partial matches (e.g., "open" finding "opensans")
    ✓ Test space handling (e.g., "open sans" finding "opensans")
    ✓ Test case sensitivity (e.g., "OpenSans" vs "opensans")
    ✓ Test non-existent fonts
    ✓ Test empty search (shows the search help)
    ✓ Test very short queries (e.g., "a", "z")
   - Test help  
    - Test help for all commands
    - Test help for a specific command
   - test parameters
    - Test parameters for all commands
    - Test parameters for a specific command
   - test error handling
    - Test error handling for all commands
    - Test error handling for a specific command

8. Distribution
-  - Package module
-  - Publish to PowerShell Gallery
-  - Create release on GitHub

Next Steps:
----------
✓ Add comment-based help to all functions
✓ Create README.md with installation and usage instructions
✓ Create Pester tests
- Prepare for PowerShell Gallery submission
  - Add GUID to module manifest
  - Fill in LicenseUri and ProjectUri
  - Update ReleaseNotes 

Module Update Strategy:

1. Version Checking:
   - [ ] Add version check on module import
   - [ ] Query GitHub releases API for latest version
   - [ ] Compare local version ($script:fontGetVersion) with latest release

2. Update Notification:
   - [ ] Show update notification when newer version available
   - [ ] Add --check-updates flag to show current/latest versions
   - [ ] Add update command: fontget update

3. Update Implementation:
   - [ ] Add Update-FontGet function to handle updates
   - [ ] Download new version from GitHub releases
   - [ ] Backup existing module
   - [ ] Replace module files
   - [ ] Reload module in current session

4. PowerShell Gallery Integration:
   - [ ] Publish module to PowerShell Gallery
   - [ ] Add PSGallery version checking
   - [ ] Support Install-Module -Name FontGet -Force for updates
   - [ ] Add documentation for both update methods

5. User Settings:
   - [ ] Add update check frequency setting
   - [ ] Allow disabling automatic update checks
   - [ ] Add --no-update-check flag

6. Documentation:
   - [ ] Document update process in README
   - [ ] Add update troubleshooting guide
   - [ ] Include rollback instructions

7. Testing:
   - [ ] Test update scenarios
   - [ ] Test version comparisons
   - [ ] Test failed update recovery 